{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","TabOneScreen","useState","isLoading","setLoading","data","setData","useEffect","a","async","fetch","response","json","console","error","getData","ActivityIndicator","FlatList","keyExtractor","index","id","renderItem","item","price","url","Image","source","uri","imageUrl","TabTwoScreen","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","Pressable","navigate","opacity","pressed","FontAwesome","size","marginRight","marginBottom","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.53f04213.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Image } from 'react-native';\n\nimport { StyleSheet } from 'react-native';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getData = async () => {\n    try {\n      // const url = 'https://reactnative.dev/movies.json';\n      const url = 'http://localhost:8000/items';\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json) // json.movies\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      {/* <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" /> */}\n      <View style={{ flex: 1, padding: 24 }}>\n        {isLoading ? <ActivityIndicator/> : (\n          <FlatList\n            data={data}\n            keyExtractor={({ id }, index) => id}\n            renderItem={({ item }) => (\n              <View style={styles.container}>\n                <Text>{item.title}</Text>\n                <Text>{item.price}</Text>\n                <Text>{item.url}</Text>\n                <Image source={{uri: item.imageUrl}}\n                       style={{width: 300, height: 300}} />\n              </View>\n            )}\n          />\n        )}\n      </View>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Tab One',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Tab Two',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}